import{j as p}from"./jsx-runtime-QvtbNqby.js";import{g as d}from"./index-CfoIBI3E.js";import{T as P}from"./Task-BDoFt-jJ.js";import{l as c}from"./constants-BuFAfZC9.js";const v={taskRuns:[]},x=({isSelectedTaskMatrix:S,onRetryChange:T,onSelect:j,selectedRetry:o,selectedStepId:A,selectedTaskId:s,selectedTaskRunName:a,taskRuns:i=v.taskRuns})=>{if(!i)return p.jsx("div",{});const f=i.filter(Boolean).find(t=>d(t).status==="False");let n=!1;return p.jsx("ol",{className:"tkn--task-tree",children:i.map((t,E)=>{if(!t)return null;const{uid:m,labels:_,name:l}=t.metadata,{[c.DASHBOARD_DISPLAY_NAME]:D,[c.PIPELINE_TASK]:e}=_;let r=t;o&&s===e&&(!a||l===a)&&(r={...r,status:r.status?.retriesStatus?.[o]});const{reason:b,status:g}=d(r),{steps:h}=r.status||{},u=!n&&(!s&&f?.metadata.uid===m||s===e&&(a?l===a:!0)||!f&&!s&&E===0);!n&&u&&(n=!0);const N=!s||S&&!a;return p.jsx(P,{displayName:D||e||l,expanded:u,id:e,onRetryChange:T,onSelect:j,reason:b,selectDefaultStep:N,selectedRetry:u&&o,selectedStepId:A,steps:h,succeeded:g,taskRun:t},m)})})},q=x;x.__docgenInfo={description:"",methods:[],displayName:"TaskTree",props:{taskRuns:{defaultValue:{value:"[]",computed:!1},required:!1}}};export{q as T};
